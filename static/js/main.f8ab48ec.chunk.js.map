{"version":3,"sources":["config.js","components/Timer.js","components/Menu.js","components/Settings.js","App.js","reportWebVitals.js","index.js"],"names":["timers","main","id","label","default","longBreak","shortBreak","labels","themes","red","class","blue","purple","fonts","kumbh","roboto","space","Timer","timerLength","TIME_LIMIT","useState","isTimerRunning","setIsTimerRunning","timerSecond","setTimerSecond","timerMinute","setTimerMinute","intervalId","setIntervalId","timeLeft","setTimeLeft","useEffect","setInterval","decreaseTimer","clearInterval","circleDasharray","rawTimeFraction","calculateTimeFraction","toFixed","document","querySelector","setAttribute","setCircleDasharray","onResetTimer","minutes","seconds","className","viewBox","xmlns","cx","cy","r","strokeDasharray","d","onClick","Menu","activeTimer","setActiveTimer","onChangeValue","event","target","value","items","timer","push","type","name","onChange","checked","htmlFor","Settings","shortBreakLength","longBreakLength","setShortBreakLength","setLongBreakLength","setTimerLength","isModalOpened","setIsModalOpened","activeTheme","setActiveTheme","activeFont","setActiveFont","initValues","setInitValues","body","dragModal","toggleModal","onChangeLengthValue","onChangeFontValue","onChangeThemeValue","elmnt","pos1","pos2","pos3","pos4","dragMouseDown","e","window","preventDefault","clientX","clientY","onmouseup","closeDragElement","onmousemove","elementDrag","style","top","offsetTop","left","offsetLeft","onmousedown","timerItems","fontItems","font","themeItems","theme","App","activeTimerLength","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f8ab48ec.chunk.js","sourcesContent":["export const timers = {\r\n    main: {\r\n        id: \"main-timer\",\r\n        label: \"pomodoro\",\r\n        default: 15\r\n    },\r\n    longBreak: {\r\n        id: \"long-break\",\r\n        label: \"long break\",\r\n        default: 5\r\n    },\r\n    shortBreak: {\r\n        id: \"short-break\",\r\n        label: \"short break\",\r\n        default: 1\r\n    }\r\n}\r\n\r\nexport const labels = {\r\n    start: \"Start\",\r\n    stop: \"Pause\",\r\n    reset: \"Reset\",\r\n    close: \"Close\",\r\n    settings: \"Settings\",\r\n    time: \"Time (minutes)\",\r\n    font: \"Font\",\r\n    color: \"Color\"\r\n\r\n};\r\n\r\nexport const themes = {\r\n    red: {\r\n        id: \"theme-red\",\r\n        class: \"theme--red\"\r\n    }, \r\n    blue: {\r\n        id: \"theme-blue\",\r\n        class: \"theme--blue\"\r\n    },\r\n    purple: {\r\n        id: \"theme-purple\",\r\n        class: \"theme--purple\"\r\n    }\r\n};\r\n\r\nexport const fonts = {\r\n    kumbh: {\r\n        id: \"font-kumbh\",\r\n        class: \"font--kumbh\"\r\n    }, \r\n    roboto: {\r\n        id: \"font-roboto\",\r\n        class: \"font--roboto\"\r\n    }, \r\n    space: {\r\n        id: \"font-space\",\r\n        class: \"font--space\"\r\n    }, \r\n};","import React, { useState, useEffect } from \"react\";\r\nimport { labels } from './../config';\r\n\r\nconst Timer = ({timerLength}) => {\r\n    const SECONDS = 60;\r\n    const FULL_DASH_ARRAY = 283;\r\n    const INTERVAL = 1000;\r\n    let   TIME_LIMIT = timerLength * SECONDS;\r\n\r\n    const [isTimerRunning, setIsTimerRunning] = useState(false);\r\n    const [timerSecond, setTimerSecond] = useState(0);\r\n    const [timerMinute, setTimerMinute] = useState(timerLength);\r\n    const [intervalId, setIntervalId] = useState(0);\r\n    const [timeLeft, setTimeLeft] = useState(TIME_LIMIT);\r\n\r\n    useEffect(() => {\r\n        if (isTimerRunning) {\r\n            const intervalId = setInterval(\r\n                () => {\r\n                    decreaseTimer(); \r\n                    setTimeLeft(timerMinute * SECONDS + timerSecond - 1);\r\n                }, INTERVAL\r\n            );\r\n            setIntervalId(intervalId);\r\n        } else {\r\n            clearInterval(intervalId);\r\n        }\r\n        return () => clearInterval(intervalId);\r\n     }, [isTimerRunning, timerSecond]);\r\n\r\n\r\n    useEffect(() => {\r\n        setCircleDasharray();\r\n    }, [timeLeft, timerSecond]);\r\n\r\n    useEffect(() => {\r\n        onResetTimer();\r\n    }, [timerLength]);\r\n\r\n    const decreaseTimer = () => {\r\n        if (timerSecond === 0) { \r\n            if (timerMinute === 0) {\r\n                setIsTimerRunning(false);\r\n            } else {\r\n                setTimerMinute(timerMinute - 1);\r\n                setTimerSecond(59);              \r\n            }\r\n        } else {\r\n            setTimerSecond(timerSecond - 1);\r\n        }\r\n    }\r\n\r\n    const onToggleTimer = () => {\r\n        setIsTimerRunning(!isTimerRunning);\r\n    }\r\n\r\n    const onResetTimer = () => {\r\n        setIsTimerRunning(false);\r\n        setTimerSecond(0);\r\n        setTimerMinute(timerLength);\r\n        setTimeLeft(TIME_LIMIT);\r\n    }\r\n\r\n    function calculateTimeFraction() {\r\n        const rawTimeFraction = timeLeft / TIME_LIMIT;\r\n        return rawTimeFraction - (1 / TIME_LIMIT) * (1 - rawTimeFraction);\r\n      }\r\n      \r\n    function setCircleDasharray() {\r\n        const circleDasharray = `${(\r\n          calculateTimeFraction() * FULL_DASH_ARRAY\r\n        ).toFixed(0)} 283`;\r\n        document\r\n          .querySelector(\".base-timer__path-remaining\")\r\n          .setAttribute(\"stroke-dasharray\", circleDasharray);\r\n    }\r\n\r\n\r\n    function formatTime(minutes, seconds) {\r\n        if (seconds < 10) {\r\n          seconds = `0${seconds}`;\r\n        }\r\n        return `${minutes}:${seconds}`;\r\n    }\r\n\r\n    return (\r\n            <div className=\"base-timer\">\r\n                <svg className=\"base-timer__svg\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <g className =\"base-timer__circle\">\r\n                  <circle className =\"base-timer__path-elapsed\" cx=\"50\" cy=\"50\" r=\"45\"></circle>\r\n                  <path\r\n                    strokeDasharray = {FULL_DASH_ARRAY}\r\n                    className =\"base-timer__path-remaining\"\r\n                    d=\"\r\n                      M 50, 50\r\n                      m -45, 0\r\n                      a 45,45 0 1,0 90,0\r\n                      a 45,45 0 1,0 -90,0\r\n                    \"\r\n                  ></path>\r\n                </g>\r\n                </svg>\r\n                <div className=\"base-timer__controls\">\r\n                    <div  className=\"base-timer__labels\">\r\n                        <span>{formatTime(timerMinute, timerSecond)}</span>\r\n                    </div>\r\n                    <div  className=\"base-timer__buttons\">\r\n                        <button onClick={onToggleTimer}>{isTimerRunning ? labels.stop : labels.start}</button>\r\n                        {!isTimerRunning && timeLeft !== TIME_LIMIT  && <button onClick={onResetTimer}>{labels.reset}</button>}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Timer;","import React, { useState } from \"react\";\r\nimport { timers } from './../config';\r\n\r\nconst Menu = ({activeTimer, setActiveTimer}) => {\r\n    \r\n\r\n    const onChangeValue = (event) => {\r\n        setActiveTimer(event.target.value)\r\n    }\r\n\r\n    let items = [];\r\n    for (let timer in timers) {\r\n        items.push (\r\n            <div key={timers[timer].id}>\r\n                <input type=\"radio\" \r\n                        name=\"active-timer\" \r\n                        id={timers[timer].id} \r\n                        value={timers[timer].id} \r\n                        onChange={onChangeValue} \r\n                        checked={timers[timer].id === activeTimer}></input>\r\n                <label htmlFor={timers[timer].id}>{timers[timer].label}</label>\r\n            </div>);\r\n    }\r\n\r\n    return (\r\n        <div className=\"menu\" >\r\n            {items}\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Menu;","import React, { useState, useEffect } from 'react';\r\nimport { timers, themes, labels, fonts } from './../config';\r\n\r\nconst Settings = ({shortBreakLength, longBreakLength, timerLength, setShortBreakLength, setLongBreakLength, setTimerLength}) => {\r\n    \r\n    const [isModalOpened, setIsModalOpened] = useState(false);\r\n    const [activeTheme, setActiveTheme] = useState(themes.red.class);\r\n    const [activeFont, setActiveFont] = useState(fonts.kumbh.class);\r\n    const [initValues, setInitValues] = useState({});\r\n\r\n    useEffect(() => {\r\n        document.body.className = activeTheme + \" \" + activeFont;\r\n    }, [activeTheme, activeFont]);\r\n\r\n    useEffect(() => {\r\n        if (isModalOpened) {\r\n            setInitValues( { activeTheme, activeFont, shortBreakLength, longBreakLength, timerLength });\r\n            dragModal();\r\n        }\r\n      }, [isModalOpened]); \r\n\r\n    const toggleModal = () => {       \r\n        setIsModalOpened(!isModalOpened);\r\n    }\r\n\r\n    const onChangeLengthValue = (event) => {\r\n        switch (event.target.name) {\r\n            case timers.main.id :  setTimerLength(event.target.value); break;\r\n            case timers.shortBreak.id :  setShortBreakLength(event.target.value); break;\r\n            case timers.longBreak.id :  setLongBreakLength(event.target.value); break;\r\n        }\r\n    }\r\n\r\n    const onChangeFontValue = (event) => {\r\n        setActiveFont(event.target.value);\r\n    }\r\n\r\n    const onChangeThemeValue = (event) => {\r\n        setActiveTheme(event.target.value);\r\n    }\r\n\r\n    const onResetChanges = () => {\r\n        setTimerLength(initValues.timerLength);\r\n        setShortBreakLength(initValues.shortBreakLength);\r\n        setLongBreakLength(initValues.longBreakLength);\r\n        setActiveTheme(initValues.activeTheme);\r\n        setActiveFont(initValues.activeFont);\r\n    }\r\n\r\n    const dragModal = () => {\r\n        const elmnt = document.querySelector(\".modal\");\r\n        let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;\r\n      \r\n        const dragMouseDown = (e) => {\r\n            e = e || window.event;\r\n            e.preventDefault();\r\n            pos3 = e.clientX;\r\n            pos4 = e.clientY;\r\n            document.onmouseup = closeDragElement;\r\n            document.onmousemove = elementDrag;\r\n        }\r\n      \r\n        const elementDrag = (e) => {\r\n            e = e || window.event;\r\n            e.preventDefault();\r\n            pos1 = pos3 - e.clientX;\r\n            pos2 = pos4 - e.clientY;\r\n            pos3 = e.clientX;\r\n            pos4 = e.clientY;\r\n            elmnt.style.top = (elmnt.offsetTop - pos2) + \"px\";\r\n            elmnt.style.left = (elmnt.offsetLeft - pos1) + \"px\";\r\n        }\r\n      \r\n        const closeDragElement = () => {\r\n            document.onmouseup = null;\r\n            document.onmousemove = null;\r\n        }\r\n\r\n        if (document.querySelector(\".modal__header\")) {\r\n            document.querySelector(\".modal__header\").onmousedown = dragMouseDown;\r\n        } else {\r\n            elmnt.onmousedown = dragMouseDown;\r\n        }\r\n    }\r\n\r\n    let timerItems = [];\r\n    for (let timer in timers) {\r\n        let value = (timer === \"longBreak\") ? longBreakLength : (timer === \"shortBreak\") ? shortBreakLength : timerLength\r\n        timerItems.push (\r\n                <div key={timers[timer].id}  className=\"setting__item\">\r\n                    <label>{timers[timer].label}</label>\r\n                    <input type=\"number\" name={timers[timer].id} value={value} onChange={onChangeLengthValue} />\r\n                </div>);\r\n    }\r\n\r\n    let fontItems = [];\r\n    for (let font in fonts) {\r\n        fontItems.push (\r\n            <div key={fonts[font].id} className=\"setting__item\">\r\n                <input type=\"radio\" \r\n                        name=\"fonts\" \r\n                        id={fonts[font].id} \r\n                        value={fonts[font].class} \r\n                        onChange={onChangeFontValue} \r\n                        checked={fonts[font].class === activeFont} />\r\n                <label htmlFor={fonts[font].id} className={fonts[font].class}>Aa</label>\r\n            </div>);\r\n    }\r\n\r\n    let themeItems = [];\r\n    for (let theme in themes) {\r\n        themeItems.push (\r\n            <div key={themes[theme].id} className=\"setting__item theme-item\">\r\n                <input type=\"radio\" \r\n                        name=\"theme\" \r\n                        id={themes[theme].id} \r\n                        value={themes[theme].class} \r\n                        onChange={onChangeThemeValue} \r\n                        checked={themes[theme].class === activeTheme} />\r\n                <label htmlFor={themes[theme].id} className={themes[theme].id}></label>\r\n            </div>);\r\n    }\r\n\r\n    return (\r\n        <div className=\"footer\">\r\n            <div><button className=\"settings-btn\" onClick={toggleModal}> </button></div>\r\n\r\n            { isModalOpened && \r\n                <div className=\"modal\">\r\n                    <div className=\"modal__header\">\r\n                        <div className=\"modal__title\">{labels.settings}</div>\r\n                        <button className=\"modal__close\" onClick={toggleModal}></button>\r\n                    </div>\r\n\r\n                    <div className=\"modal__row setting\"> \r\n                        <div className=\"setting__title\">{labels.time}</div>\r\n                        <div className=\"setting__items\">\r\n                            {timerItems}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"modal__row setting setting--row\">\r\n                        <div className=\"setting__title\">{labels.font}</div>\r\n                        <div className=\"setting__items\">\r\n                            {fontItems}\r\n                        </div>\r\n                    </div>\r\n                \r\n                    <div className=\"modal__row setting setting--row\">\r\n                        <div className=\"setting__title\">{labels.color}</div>\r\n                        <div className=\"setting__items\">\r\n                            {themeItems}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"modal__footer\">\r\n                        <button onClick={onResetChanges}>{labels.reset}</button>\r\n                        <button onClick={toggleModal}>{labels.close}</button>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Settings;","import React, { useState, useEffect } from \"react\";\nimport Timer from './components/Timer';\nimport Menu from './components/Menu';\nimport Settings from './components/Settings';\nimport { timers } from './config';\n\nfunction App() {\n\n  const [shortBreakLength, setShortBreakLength] = useState(timers.shortBreak.default);\n  const [longBreakLength, setLongBreakLength] = useState(timers.longBreak.default);\n  const [timerLength, setTimerLength] = useState(timers.main.default);\n  const [activeTimer, setActiveTimer] = useState(timers.main.id);\n\n  const activeTimerLength = (activeTimer === timers.longBreak.id) ? longBreakLength : \n                            (activeTimer === timers.shortBreak.id) ? shortBreakLength : timerLength;\n\n  return (\n    <div>\n      <header>\n        <div className=\"logo\"></div>\n        <Menu activeTimer={activeTimer} setActiveTimer={setActiveTimer}/>\n      </header>\n      <main>\n        <Timer timerLength={activeTimerLength} />\n      </main>\n      <Settings shortBreakLength={shortBreakLength} longBreakLength={longBreakLength} timerLength={timerLength}\n            setShortBreakLength={setShortBreakLength} setLongBreakLength={setLongBreakLength} setTimerLength={setTimerLength}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}