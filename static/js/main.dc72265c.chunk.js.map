{"version":3,"sources":["config.js","components/Timer.js","components/Menu.js","App.js","reportWebVitals.js","index.js"],"names":["timers","main","id","label","longBreak","shortBreak","LABELS","Timer","timerLength","TIME_LIMIT","useState","isTimerRunning","setIsTimerRunning","timerSecond","setTimerSecond","timerMinute","setTimerMinute","intervalId","setIntervalId","timeLeft","setTimeLeft","useEffect","setInterval","decreaseTimer","clearInterval","circleDasharray","rawTimeFraction","calculateTimeFraction","toFixed","document","querySelector","setAttribute","setCircleDasharray","onResetTimer","minutes","seconds","className","viewBox","xmlns","cx","cy","r","strokeDasharray","d","onClick","Menu","activeTimer","setActiveTimer","onChangeValue","event","target","value","items","timer","push","type","name","onChange","checked","htmlFor","App","shortBreakLength","longBreakLength","theme","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"4KAAaA,EAAS,CAClBC,KAAM,CACFC,GAAI,aACJC,MAAO,YAEXC,UAAW,CACPF,GAAI,aACJC,MAAO,cAEXE,WAAY,CACRH,GAAI,cACJC,MAAO,gBAIFG,EACF,QADEA,EAEH,QAFGA,EAGF,Q,OCkGIC,EAjHD,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YAGNC,EAFU,GAEGD,EAHU,EAKeE,oBAAS,GALxB,mBAKtBC,EALsB,KAKNC,EALM,OAMSF,mBAAS,GANlB,mBAMtBG,EANsB,KAMTC,EANS,OAOSJ,mBAASF,GAPlB,mBAOtBO,EAPsB,KAOTC,EAPS,OAQON,mBAAS,GARhB,mBAQtBO,EARsB,KAQVC,EARU,OASGR,mBAASD,GATZ,mBAStBU,EATsB,KASZC,EATY,KAW7BC,qBAAU,WAEN,GAAIV,EAAgB,CAChB,IAAMM,EAAaK,aACf,WACIC,IACAH,EAhBA,GAgBYL,EAAwBF,KACrC,KAEPK,EAAcD,QAEdO,cAAcP,GAElB,OAAO,kBAAMO,cAAcP,MAC3B,CAACN,EAAgBE,IAGrBQ,qBAAU,YAqCV,WACI,IAAMI,EAAe,WAhED,IA0DxB,WACI,IAAMC,EAAkBP,EAAWV,EACnC,OAAOiB,EAAmB,EAAIjB,GAAe,EAAIiB,GAK/CC,IACAC,QAAQ,GAFW,QAGrBC,SACGC,cAAc,+BACdC,aAAa,mBAAoBN,GA1CpCO,KACD,CAACb,EAAUN,IAEdQ,qBAAU,WACNY,MACD,CAACzB,IAEJ,IAuCoB0B,EAASC,EAvCvBZ,EAAgB,WACE,IAAhBV,EACoB,IAAhBE,EACAH,GAAkB,IAElBI,EAAeD,EAAc,GAC7BD,EAAe,KAGnBA,EAAeD,EAAc,IAQ/BoB,EAAe,WACjBrB,GAAkB,GAClBE,EAAe,GACfE,EAAeR,GACfY,EAAYX,IAyBhB,OACQ,sBAAK2B,UAAU,aAAf,UACI,qBAAKA,UAAU,kBAAkBC,QAAQ,cAAcC,MAAM,6BAA7D,SACA,oBAAGF,UAAW,qBAAd,UACE,wBAAQA,UAAW,2BAA2BG,GAAG,KAAKC,GAAG,KAAKC,EAAE,OAChE,sBACEC,gBAtFQ,IAuFRN,UAAW,6BACXO,EAAE,8EASN,sBAAKP,UAAU,uBAAf,UACI,qBAAMA,UAAU,qBAAhB,SACI,gCA1BAF,EA0BkBnB,EA1BToB,EA0BsBtB,EAzB3CsB,EAAU,KACZA,EAAO,WAAOA,IAEV,GAAN,OAAUD,EAAV,YAAqBC,QAwBT,sBAAMC,UAAU,sBAAhB,UACI,wBAAQQ,QAvDN,WAClBhC,GAAmBD,IAsDH,SAAiCA,EAAiBL,EAAcA,KAC9DK,GAAkBQ,IAAaV,GAAe,wBAAQmC,QAASX,EAAjB,SAAgC3B,cC5EzFuC,EA7BF,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,YAAaC,EAAoB,EAApBA,eAGlBC,EAAgB,SAACC,GACnBF,EAAeE,EAAMC,OAAOC,QAG5BC,EAAQ,GACZ,IAAK,IAAIC,KAASrD,EACdoD,EAAME,KACF,gCACI,uBAAOC,KAAK,QACJC,KAAK,eACLtD,GAAIF,EAAOqD,GAAOnD,GAClBiD,MAAOnD,EAAOqD,GAAOnD,GACrBuD,SAAUT,EACVU,QAAS1D,EAAOqD,GAAOnD,KAAO4C,IACtC,uBAAOa,QAAS3D,EAAOqD,GAAOnD,GAA9B,SAAmCF,EAAOqD,GAAOlD,UAP3CH,EAAOqD,GAAOnD,KAWhC,OACI,qBAAKkC,UAAU,OAAf,SACKgB,KCSEQ,MA/Bf,WACE,IAAM5D,EACE,aADFA,EAEO,aAFPA,EAGQ,cAJD,EAOmCU,mBAAS,GAP5C,mBAONmD,EAPM,aAQiCnD,mBAAS,IAR1C,mBAQNoD,EARM,aASyBpD,mBAAS,KATlC,mBASNF,EATM,aAUyBE,mBAASV,IAVlC,mBAUN8C,EAVM,KAUOC,EAVP,OAWarC,mBAAS,cAXtB,mBAWNqD,EAXM,KAiBb,OAjBa,KAab1C,qBAAU,WACRQ,SAASmC,KAAK5B,UAAY2B,IACzB,CAACA,IAGF,gCACE,mCACE,qBAAK3B,UAAU,SACf,cAAC,EAAD,CAAMU,YAAaA,EAAaC,eAAgBA,OAElD,+BACE,cAAC,EAAD,CAAOvC,YAAcsC,IAAgB9C,EAAoB8D,EAAmBhB,IAAgB9C,EAAqB6D,EAAmBrD,UChB7HyD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF/C,SAASgD,eAAe,SAM1BZ,K","file":"static/js/main.dc72265c.chunk.js","sourcesContent":["export const timers = {\r\n    main: {\r\n        id: \"main-timer\",\r\n        label: \"pomodoro\"\r\n    },\r\n    longBreak: {\r\n        id: \"long-break\",\r\n        label: \"long break\"\r\n    },\r\n    shortBreak: {\r\n        id: \"short-break\",\r\n        label: \"short break\"\r\n    }\r\n}\r\n\r\nexport const LABELS = {\r\n    start: \"Start\",\r\n    stop: \"Pause\",\r\n    reset: \"Reset\"\r\n};","import React, { useState, useEffect } from \"react\";\r\nimport { LABELS } from './../config';\r\n\r\nconst Timer = ({timerLength}) => {\r\n    const SECONDS = 60;\r\n    const FULL_DASH_ARRAY = 283;\r\n    let   TIME_LIMIT = timerLength * SECONDS;\r\n\r\n    const [isTimerRunning, setIsTimerRunning] = useState(false);\r\n    const [timerSecond, setTimerSecond] = useState(0);\r\n    const [timerMinute, setTimerMinute] = useState(timerLength);\r\n    const [intervalId, setIntervalId] = useState(0);\r\n    const [timeLeft, setTimeLeft] = useState(TIME_LIMIT);\r\n\r\n    useEffect(() => {\r\n        \r\n        if (isTimerRunning) {\r\n            const intervalId = setInterval(\r\n                () => {\r\n                    decreaseTimer(); \r\n                    setTimeLeft(timerMinute * SECONDS + timerSecond);\r\n                }, 1000\r\n            );\r\n            setIntervalId(intervalId);\r\n        } else {\r\n            clearInterval(intervalId);\r\n        }\r\n        return () => clearInterval(intervalId);\r\n     }, [isTimerRunning, timerSecond]);\r\n\r\n\r\n    useEffect(() => {\r\n        setCircleDasharray();\r\n    }, [timeLeft, timerSecond]);\r\n\r\n    useEffect(() => {\r\n        onResetTimer();\r\n    }, [timerLength]);\r\n\r\n    const decreaseTimer = () => {\r\n        if (timerSecond === 0) { \r\n            if (timerMinute === 0) {\r\n                setIsTimerRunning(false);\r\n            } else {\r\n                setTimerMinute(timerMinute - 1);\r\n                setTimerSecond(59);              \r\n            }\r\n        } else {\r\n            setTimerSecond(timerSecond - 1);\r\n        }\r\n    }\r\n\r\n    const onToggleTimer = () => {\r\n        setIsTimerRunning(!isTimerRunning);\r\n    }\r\n\r\n    const onResetTimer = () => {\r\n        setIsTimerRunning(false);\r\n        setTimerSecond(0);\r\n        setTimerMinute(timerLength);\r\n        setTimeLeft(TIME_LIMIT);\r\n    }\r\n\r\n    function calculateTimeFraction() {\r\n        const rawTimeFraction = timeLeft / TIME_LIMIT;\r\n        return rawTimeFraction - (1 / TIME_LIMIT) * (1 - rawTimeFraction);\r\n      }\r\n      \r\n    function setCircleDasharray() {\r\n        const circleDasharray = `${(\r\n          calculateTimeFraction() * FULL_DASH_ARRAY\r\n        ).toFixed(0)} 283`;\r\n        document\r\n          .querySelector(\".base-timer__path-remaining\")\r\n          .setAttribute(\"stroke-dasharray\", circleDasharray);\r\n    }\r\n\r\n\r\n    function formatTime(minutes, seconds) {\r\n        if (seconds < 10) {\r\n          seconds = `0${seconds}`;\r\n        }\r\n        return `${minutes}:${seconds}`;\r\n    }\r\n\r\n    return (\r\n            <div className=\"base-timer\">\r\n                <svg className=\"base-timer__svg\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <g className =\"base-timer__circle\">\r\n                  <circle className =\"base-timer__path-elapsed\" cx=\"50\" cy=\"50\" r=\"45\"></circle>\r\n                  <path\r\n                    strokeDasharray = {FULL_DASH_ARRAY}\r\n                    className =\"base-timer__path-remaining\"\r\n                    d=\"\r\n                      M 50, 50\r\n                      m -45, 0\r\n                      a 45,45 0 1,0 90,0\r\n                      a 45,45 0 1,0 -90,0\r\n                    \"\r\n                  ></path>\r\n                </g>\r\n                </svg>\r\n                <div className=\"base-timer__controls\">\r\n                    <div  className=\"base-timer__labels\">\r\n                        <span>{formatTime(timerMinute, timerSecond)}</span>\r\n                    </div>\r\n                    <div  className=\"base-timer__buttons\">\r\n                        <button onClick={onToggleTimer}>{isTimerRunning ? LABELS.stop : LABELS.start}</button>\r\n                        {!isTimerRunning && timeLeft !== TIME_LIMIT  && <button onClick={onResetTimer}>{LABELS.reset}</button>}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Timer;","import React, { useState } from \"react\";\r\nimport { timers } from './../config';\r\n\r\nconst Menu = ({activeTimer, setActiveTimer}) => {\r\n    \r\n\r\n    const onChangeValue = (event) => {\r\n        setActiveTimer(event.target.value)\r\n    }\r\n\r\n    let items = [];\r\n    for (let timer in timers) {\r\n        items.push (\r\n            <div key={timers[timer].id}>\r\n                <input type=\"radio\" \r\n                        name=\"active-timer\" \r\n                        id={timers[timer].id} \r\n                        value={timers[timer].id} \r\n                        onChange={onChangeValue} \r\n                        checked={timers[timer].id === activeTimer}></input>\r\n                <label htmlFor={timers[timer].id}>{timers[timer].label}</label>\r\n            </div>);\r\n    }\r\n\r\n    return (\r\n        <div className=\"menu\" >\r\n            {items}\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Menu;","import React, { useState, useEffect } from \"react\";\nimport Timer from './components/Timer';\nimport Menu from './components/Menu';\n\nfunction App() {\n  const timers = {\n    main: \"main-timer\",\n    longBreak: \"long-break\",\n    shortBreak: \"short-break\"\n  }\n\n  const [shortBreakLength, setShortBreakLength] = useState(1);\n  const [longBreakLength, setLongBreakLength] = useState(5);\n  const [timerLength, setTimerLength] = useState(15);\n  const [activeTimer, setActiveTimer] = useState(timers.main);\n  const [theme, setTheme] = useState(\"theme--red\");\n\n  useEffect(() => {\n    document.body.className = theme;\n  }, [theme]);\n\n  return (\n    <div>\n      <header>\n        <div className=\"logo\"></div>\n        <Menu activeTimer={activeTimer} setActiveTimer={setActiveTimer}/>\n      </header>\n      <main>\n        <Timer timerLength={(activeTimer === timers.longBreak) ? longBreakLength : (activeTimer === timers.shortBreak) ? shortBreakLength : timerLength} />\n      </main>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}